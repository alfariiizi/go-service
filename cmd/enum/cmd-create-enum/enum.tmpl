// Code generated by Vandor. DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

{{if .Description}}// {{.Description}}{{end}}
type {{.Type}} string

const (
{{- range .Values}}
	// {{.Description}}
	{{.ConstName}} {{$.Type}} = "{{.Name}}"
{{- end}}
)

var All{{.Type}}s = []{{.Type}}{
{{- range .Values}}
	{{.ConstName}},
{{- end}}
}

var {{.Type}}Enum = struct {
{{- range .Values}}
	{{.FieldName}}    {{$.Type}}
{{- end}}
}{
{{- range .Values}}
	{{.FieldName}}:    {{.ConstName}},
{{- end}}
}

var {{lcFirst .Type}}Labels = map[{{.Type}}]string{
{{- range .Values}}
	{{.ConstName}}:    "{{.Description}}",
{{- end}}
}

func (e {{.Type}}) IsValid() bool {
	switch e {
	case {{range $i, $v := .Values}}{{if $i}},
		{{end}}{{$v.ConstName}}{{end}}:
		return true
	}
	return false
}

func (e {{.Type}}) String() string {
	return string(e)
}

func (e {{.Type}}) Label() string {
	if label, ok := {{lcFirst .Type}}Labels[e]; ok {
		return label
	}
	return string(e)
}

func Parse{{.Type}}(s string) ({{.Type}}, error) {
	switch strings.ToUpper(s) {
{{- range .Values}}
	case "{{.Name}}":
		return {{.ConstName}}, nil
{{- end}}
	}
	return "", fmt.Errorf("invalid {{.Type}}: %s", s)
}

func (e {{.Type}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

func (e *{{.Type}}) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	val, err := Parse{{.Type}}(s)
	if err != nil {
		return err
	}
	*e = val
	return nil
}
