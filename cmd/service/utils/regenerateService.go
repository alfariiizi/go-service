package utils

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"
)

func RegenerateServicesGo() error {
	serviceRoot := "internal/core/service"
	groupStructMap := map[string]string{}

	dirs, err := os.ReadDir(serviceRoot)
	if err != nil {
		return err
	}

	for _, dir := range dirs {
		if !dir.IsDir() {
			continue
		}
		group := dir.Name()
		serviceFile := filepath.Join(serviceRoot, group, "service.go")

		fset := token.NewFileSet()
		node, err := parser.ParseFile(fset, serviceFile, nil, 0)
		if err != nil {
			continue
		}

		for _, decl := range node.Decls {
			gen, ok := decl.(*ast.GenDecl)
			if !ok || gen.Tok != token.TYPE {
				continue
			}
			for _, spec := range gen.Specs {
				typeSpec := spec.(*ast.TypeSpec)
				if typeSpec.Name.IsExported() && strings.HasSuffix(typeSpec.Name.Name, "Service") {
					groupStructMap[group] = typeSpec.Name.Name
				}
			}
		}
	}

	// Generate services.go
	var buf bytes.Buffer
	buf.WriteString("// Package service provides all services for the application.\n")
	buf.WriteString("// Code generated by Service Generator. DO NOT EDIT.\n")
	buf.WriteString("// Template: https://github.com/alfariiizi/vandor.\n")
	buf.WriteString("package service\n\n")
	buf.WriteString("import (\n\t\"go.uber.org/fx\"\n")
	for group := range groupStructMap {
		buf.WriteString(fmt.Sprintf("\t%s_service \"github.com/alfariiizi/vandor/internal/core/service/%s\"\n", group, group))
	}
	buf.WriteString(")\n\n")

	buf.WriteString("type Services struct {\n")
	for group, structName := range groupStructMap {
		buf.WriteString(fmt.Sprintf("\t%s %s_service.%s\n", strings.Title(group), group, structName))
	}
	buf.WriteString("}\n\n")

	buf.WriteString("func NewServices(\n")
	for group, structName := range groupStructMap {
		param := strings.ToLower(group)
		buf.WriteString(fmt.Sprintf("\t%s %s_service.%s,\n", param, group, structName))
	}
	buf.WriteString(") *Services {\n\treturn &Services{\n")
	for group := range groupStructMap {
		buf.WriteString(fmt.Sprintf("\t\t%s: %s,\n", strings.Title(group), strings.ToLower(group)))
	}
	buf.WriteString("\t}\n}\n\n")

	buf.WriteString("var Module = fx.Module(\n\t\"service\",\n\tfx.Provide(\n\t\tNewServices,\n\t),\n")
	for group := range groupStructMap {
		buf.WriteString(fmt.Sprintf("\t%s_service.Module,\n", group))
	}
	buf.WriteString(")\n")

	return os.WriteFile(filepath.Join(serviceRoot, "services.go"), buf.Bytes(), 0644)
}
