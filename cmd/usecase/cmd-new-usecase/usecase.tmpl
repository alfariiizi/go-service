package usecase

import (
	"context"
	"log"

	domain_entries "{{.ModuleName}}/internal/core/domain"
	"{{.ModuleName}}/internal/core/model"
	"{{.ModuleName}}/internal/infrastructure/db"
	"{{.ModuleName}}/pkg/validator"
)

type {{.Name}}Input struct {
	// TODO: Define fields
}
type {{.Name}}Output struct {
	// TODO: Define fields
}
type {{.Name}} model.Usecase[{{.Name}}Input, {{.Name}}Output]

type {{.Receiver}} struct {
	client *db.Client
	domain  *domain_entries.Domain
	validator validator.Validator
}

func New{{.Name}}(
	client *db.Client,
	domain *domain_entries.Domain,
	validator validator.Validator,
) {{.Name}} {	
	return &{{.Receiver}}{
		client: client,
		domain:  domain,
		validator: validator,
	}
}

func (uc *{{.Receiver}}) Validate(input {{.Name}}Input) error {
	return uc.validator.Validate(input)
}

func (uc *{{.Receiver}}) Execute(ctx context.Context, input {{.Name}}Input) (*{{.Name}}Output, error) {
	if err := uc.Validate(input); err != nil {
		return nil, err
	}
	if err := uc.Observer(ctx, input); err != nil {
		log.Printf("Observer usecase '{{.Name}}' error: %s", err.Error())
	}
	return uc.Process(ctx, input)
}

func (uc *{{.Receiver}}) Observer(ctx context.Context, input {{.Name}}Input) error {
        // TODO: Implement observer logic
	// This is optional. You can leave this blank if not needed.

	return nil
}

func (uc *{{.Receiver}}) Process(ctx context.Context, input {{.Name}}Input) (*{{.Name}}Output, error) {
	// TODO: Implement logic

	return &{{.Name}}Output{}, nil
}
