// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/adminauditlog"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
)

// AdminAuditLogUpdate is the builder for updating AdminAuditLog entities.
type AdminAuditLogUpdate struct {
	config
	hooks    []Hook
	mutation *AdminAuditLogMutation
}

// Where appends a list predicates to the AdminAuditLogUpdate builder.
func (aalu *AdminAuditLogUpdate) Where(ps ...predicate.AdminAuditLog) *AdminAuditLogUpdate {
	aalu.mutation.Where(ps...)
	return aalu
}

// SetUserEmail sets the "user_email" field.
func (aalu *AdminAuditLogUpdate) SetUserEmail(s string) *AdminAuditLogUpdate {
	aalu.mutation.SetUserEmail(s)
	return aalu
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (aalu *AdminAuditLogUpdate) SetNillableUserEmail(s *string) *AdminAuditLogUpdate {
	if s != nil {
		aalu.SetUserEmail(*s)
	}
	return aalu
}

// SetOperation sets the "operation" field.
func (aalu *AdminAuditLogUpdate) SetOperation(s string) *AdminAuditLogUpdate {
	aalu.mutation.SetOperation(s)
	return aalu
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (aalu *AdminAuditLogUpdate) SetNillableOperation(s *string) *AdminAuditLogUpdate {
	if s != nil {
		aalu.SetOperation(*s)
	}
	return aalu
}

// SetModel sets the "model" field.
func (aalu *AdminAuditLogUpdate) SetModel(s string) *AdminAuditLogUpdate {
	aalu.mutation.SetModel(s)
	return aalu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (aalu *AdminAuditLogUpdate) SetNillableModel(s *string) *AdminAuditLogUpdate {
	if s != nil {
		aalu.SetModel(*s)
	}
	return aalu
}

// SetArgs sets the "args" field.
func (aalu *AdminAuditLogUpdate) SetArgs(m map[string]interface{}) *AdminAuditLogUpdate {
	aalu.mutation.SetArgs(m)
	return aalu
}

// SetResult sets the "result" field.
func (aalu *AdminAuditLogUpdate) SetResult(m map[string]interface{}) *AdminAuditLogUpdate {
	aalu.mutation.SetResult(m)
	return aalu
}

// ClearResult clears the value of the "result" field.
func (aalu *AdminAuditLogUpdate) ClearResult() *AdminAuditLogUpdate {
	aalu.mutation.ClearResult()
	return aalu
}

// SetQuery sets the "query" field.
func (aalu *AdminAuditLogUpdate) SetQuery(s string) *AdminAuditLogUpdate {
	aalu.mutation.SetQuery(s)
	return aalu
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (aalu *AdminAuditLogUpdate) SetNillableQuery(s *string) *AdminAuditLogUpdate {
	if s != nil {
		aalu.SetQuery(*s)
	}
	return aalu
}

// ClearQuery clears the value of the "query" field.
func (aalu *AdminAuditLogUpdate) ClearQuery() *AdminAuditLogUpdate {
	aalu.mutation.ClearQuery()
	return aalu
}

// SetParams sets the "params" field.
func (aalu *AdminAuditLogUpdate) SetParams(s string) *AdminAuditLogUpdate {
	aalu.mutation.SetParams(s)
	return aalu
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (aalu *AdminAuditLogUpdate) SetNillableParams(s *string) *AdminAuditLogUpdate {
	if s != nil {
		aalu.SetParams(*s)
	}
	return aalu
}

// ClearParams clears the value of the "params" field.
func (aalu *AdminAuditLogUpdate) ClearParams() *AdminAuditLogUpdate {
	aalu.mutation.ClearParams()
	return aalu
}

// SetSource sets the "source" field.
func (aalu *AdminAuditLogUpdate) SetSource(s string) *AdminAuditLogUpdate {
	aalu.mutation.SetSource(s)
	return aalu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (aalu *AdminAuditLogUpdate) SetNillableSource(s *string) *AdminAuditLogUpdate {
	if s != nil {
		aalu.SetSource(*s)
	}
	return aalu
}

// SetDurationMs sets the "duration_ms" field.
func (aalu *AdminAuditLogUpdate) SetDurationMs(i int) *AdminAuditLogUpdate {
	aalu.mutation.ResetDurationMs()
	aalu.mutation.SetDurationMs(i)
	return aalu
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (aalu *AdminAuditLogUpdate) SetNillableDurationMs(i *int) *AdminAuditLogUpdate {
	if i != nil {
		aalu.SetDurationMs(*i)
	}
	return aalu
}

// AddDurationMs adds i to the "duration_ms" field.
func (aalu *AdminAuditLogUpdate) AddDurationMs(i int) *AdminAuditLogUpdate {
	aalu.mutation.AddDurationMs(i)
	return aalu
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (aalu *AdminAuditLogUpdate) ClearDurationMs() *AdminAuditLogUpdate {
	aalu.mutation.ClearDurationMs()
	return aalu
}

// SetCreatedAt sets the "created_at" field.
func (aalu *AdminAuditLogUpdate) SetCreatedAt(t time.Time) *AdminAuditLogUpdate {
	aalu.mutation.SetCreatedAt(t)
	return aalu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aalu *AdminAuditLogUpdate) SetNillableCreatedAt(t *time.Time) *AdminAuditLogUpdate {
	if t != nil {
		aalu.SetCreatedAt(*t)
	}
	return aalu
}

// Mutation returns the AdminAuditLogMutation object of the builder.
func (aalu *AdminAuditLogUpdate) Mutation() *AdminAuditLogMutation {
	return aalu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aalu *AdminAuditLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aalu.sqlSave, aalu.mutation, aalu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aalu *AdminAuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := aalu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aalu *AdminAuditLogUpdate) Exec(ctx context.Context) error {
	_, err := aalu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aalu *AdminAuditLogUpdate) ExecX(ctx context.Context) {
	if err := aalu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aalu *AdminAuditLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminauditlog.Table, adminauditlog.Columns, sqlgraph.NewFieldSpec(adminauditlog.FieldID, field.TypeUUID))
	if ps := aalu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aalu.mutation.UserEmail(); ok {
		_spec.SetField(adminauditlog.FieldUserEmail, field.TypeString, value)
	}
	if value, ok := aalu.mutation.Operation(); ok {
		_spec.SetField(adminauditlog.FieldOperation, field.TypeString, value)
	}
	if value, ok := aalu.mutation.Model(); ok {
		_spec.SetField(adminauditlog.FieldModel, field.TypeString, value)
	}
	if value, ok := aalu.mutation.Args(); ok {
		_spec.SetField(adminauditlog.FieldArgs, field.TypeJSON, value)
	}
	if value, ok := aalu.mutation.Result(); ok {
		_spec.SetField(adminauditlog.FieldResult, field.TypeJSON, value)
	}
	if aalu.mutation.ResultCleared() {
		_spec.ClearField(adminauditlog.FieldResult, field.TypeJSON)
	}
	if value, ok := aalu.mutation.Query(); ok {
		_spec.SetField(adminauditlog.FieldQuery, field.TypeString, value)
	}
	if aalu.mutation.QueryCleared() {
		_spec.ClearField(adminauditlog.FieldQuery, field.TypeString)
	}
	if value, ok := aalu.mutation.Params(); ok {
		_spec.SetField(adminauditlog.FieldParams, field.TypeString, value)
	}
	if aalu.mutation.ParamsCleared() {
		_spec.ClearField(adminauditlog.FieldParams, field.TypeString)
	}
	if value, ok := aalu.mutation.Source(); ok {
		_spec.SetField(adminauditlog.FieldSource, field.TypeString, value)
	}
	if value, ok := aalu.mutation.DurationMs(); ok {
		_spec.SetField(adminauditlog.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := aalu.mutation.AddedDurationMs(); ok {
		_spec.AddField(adminauditlog.FieldDurationMs, field.TypeInt, value)
	}
	if aalu.mutation.DurationMsCleared() {
		_spec.ClearField(adminauditlog.FieldDurationMs, field.TypeInt)
	}
	if value, ok := aalu.mutation.CreatedAt(); ok {
		_spec.SetField(adminauditlog.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aalu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminauditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aalu.mutation.done = true
	return n, nil
}

// AdminAuditLogUpdateOne is the builder for updating a single AdminAuditLog entity.
type AdminAuditLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminAuditLogMutation
}

// SetUserEmail sets the "user_email" field.
func (aaluo *AdminAuditLogUpdateOne) SetUserEmail(s string) *AdminAuditLogUpdateOne {
	aaluo.mutation.SetUserEmail(s)
	return aaluo
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (aaluo *AdminAuditLogUpdateOne) SetNillableUserEmail(s *string) *AdminAuditLogUpdateOne {
	if s != nil {
		aaluo.SetUserEmail(*s)
	}
	return aaluo
}

// SetOperation sets the "operation" field.
func (aaluo *AdminAuditLogUpdateOne) SetOperation(s string) *AdminAuditLogUpdateOne {
	aaluo.mutation.SetOperation(s)
	return aaluo
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (aaluo *AdminAuditLogUpdateOne) SetNillableOperation(s *string) *AdminAuditLogUpdateOne {
	if s != nil {
		aaluo.SetOperation(*s)
	}
	return aaluo
}

// SetModel sets the "model" field.
func (aaluo *AdminAuditLogUpdateOne) SetModel(s string) *AdminAuditLogUpdateOne {
	aaluo.mutation.SetModel(s)
	return aaluo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (aaluo *AdminAuditLogUpdateOne) SetNillableModel(s *string) *AdminAuditLogUpdateOne {
	if s != nil {
		aaluo.SetModel(*s)
	}
	return aaluo
}

// SetArgs sets the "args" field.
func (aaluo *AdminAuditLogUpdateOne) SetArgs(m map[string]interface{}) *AdminAuditLogUpdateOne {
	aaluo.mutation.SetArgs(m)
	return aaluo
}

// SetResult sets the "result" field.
func (aaluo *AdminAuditLogUpdateOne) SetResult(m map[string]interface{}) *AdminAuditLogUpdateOne {
	aaluo.mutation.SetResult(m)
	return aaluo
}

// ClearResult clears the value of the "result" field.
func (aaluo *AdminAuditLogUpdateOne) ClearResult() *AdminAuditLogUpdateOne {
	aaluo.mutation.ClearResult()
	return aaluo
}

// SetQuery sets the "query" field.
func (aaluo *AdminAuditLogUpdateOne) SetQuery(s string) *AdminAuditLogUpdateOne {
	aaluo.mutation.SetQuery(s)
	return aaluo
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (aaluo *AdminAuditLogUpdateOne) SetNillableQuery(s *string) *AdminAuditLogUpdateOne {
	if s != nil {
		aaluo.SetQuery(*s)
	}
	return aaluo
}

// ClearQuery clears the value of the "query" field.
func (aaluo *AdminAuditLogUpdateOne) ClearQuery() *AdminAuditLogUpdateOne {
	aaluo.mutation.ClearQuery()
	return aaluo
}

// SetParams sets the "params" field.
func (aaluo *AdminAuditLogUpdateOne) SetParams(s string) *AdminAuditLogUpdateOne {
	aaluo.mutation.SetParams(s)
	return aaluo
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (aaluo *AdminAuditLogUpdateOne) SetNillableParams(s *string) *AdminAuditLogUpdateOne {
	if s != nil {
		aaluo.SetParams(*s)
	}
	return aaluo
}

// ClearParams clears the value of the "params" field.
func (aaluo *AdminAuditLogUpdateOne) ClearParams() *AdminAuditLogUpdateOne {
	aaluo.mutation.ClearParams()
	return aaluo
}

// SetSource sets the "source" field.
func (aaluo *AdminAuditLogUpdateOne) SetSource(s string) *AdminAuditLogUpdateOne {
	aaluo.mutation.SetSource(s)
	return aaluo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (aaluo *AdminAuditLogUpdateOne) SetNillableSource(s *string) *AdminAuditLogUpdateOne {
	if s != nil {
		aaluo.SetSource(*s)
	}
	return aaluo
}

// SetDurationMs sets the "duration_ms" field.
func (aaluo *AdminAuditLogUpdateOne) SetDurationMs(i int) *AdminAuditLogUpdateOne {
	aaluo.mutation.ResetDurationMs()
	aaluo.mutation.SetDurationMs(i)
	return aaluo
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (aaluo *AdminAuditLogUpdateOne) SetNillableDurationMs(i *int) *AdminAuditLogUpdateOne {
	if i != nil {
		aaluo.SetDurationMs(*i)
	}
	return aaluo
}

// AddDurationMs adds i to the "duration_ms" field.
func (aaluo *AdminAuditLogUpdateOne) AddDurationMs(i int) *AdminAuditLogUpdateOne {
	aaluo.mutation.AddDurationMs(i)
	return aaluo
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (aaluo *AdminAuditLogUpdateOne) ClearDurationMs() *AdminAuditLogUpdateOne {
	aaluo.mutation.ClearDurationMs()
	return aaluo
}

// SetCreatedAt sets the "created_at" field.
func (aaluo *AdminAuditLogUpdateOne) SetCreatedAt(t time.Time) *AdminAuditLogUpdateOne {
	aaluo.mutation.SetCreatedAt(t)
	return aaluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aaluo *AdminAuditLogUpdateOne) SetNillableCreatedAt(t *time.Time) *AdminAuditLogUpdateOne {
	if t != nil {
		aaluo.SetCreatedAt(*t)
	}
	return aaluo
}

// Mutation returns the AdminAuditLogMutation object of the builder.
func (aaluo *AdminAuditLogUpdateOne) Mutation() *AdminAuditLogMutation {
	return aaluo.mutation
}

// Where appends a list predicates to the AdminAuditLogUpdate builder.
func (aaluo *AdminAuditLogUpdateOne) Where(ps ...predicate.AdminAuditLog) *AdminAuditLogUpdateOne {
	aaluo.mutation.Where(ps...)
	return aaluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aaluo *AdminAuditLogUpdateOne) Select(field string, fields ...string) *AdminAuditLogUpdateOne {
	aaluo.fields = append([]string{field}, fields...)
	return aaluo
}

// Save executes the query and returns the updated AdminAuditLog entity.
func (aaluo *AdminAuditLogUpdateOne) Save(ctx context.Context) (*AdminAuditLog, error) {
	return withHooks(ctx, aaluo.sqlSave, aaluo.mutation, aaluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aaluo *AdminAuditLogUpdateOne) SaveX(ctx context.Context) *AdminAuditLog {
	node, err := aaluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aaluo *AdminAuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aaluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaluo *AdminAuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := aaluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aaluo *AdminAuditLogUpdateOne) sqlSave(ctx context.Context) (_node *AdminAuditLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminauditlog.Table, adminauditlog.Columns, sqlgraph.NewFieldSpec(adminauditlog.FieldID, field.TypeUUID))
	id, ok := aaluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "AdminAuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aaluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminauditlog.FieldID)
		for _, f := range fields {
			if !adminauditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != adminauditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aaluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aaluo.mutation.UserEmail(); ok {
		_spec.SetField(adminauditlog.FieldUserEmail, field.TypeString, value)
	}
	if value, ok := aaluo.mutation.Operation(); ok {
		_spec.SetField(adminauditlog.FieldOperation, field.TypeString, value)
	}
	if value, ok := aaluo.mutation.Model(); ok {
		_spec.SetField(adminauditlog.FieldModel, field.TypeString, value)
	}
	if value, ok := aaluo.mutation.Args(); ok {
		_spec.SetField(adminauditlog.FieldArgs, field.TypeJSON, value)
	}
	if value, ok := aaluo.mutation.Result(); ok {
		_spec.SetField(adminauditlog.FieldResult, field.TypeJSON, value)
	}
	if aaluo.mutation.ResultCleared() {
		_spec.ClearField(adminauditlog.FieldResult, field.TypeJSON)
	}
	if value, ok := aaluo.mutation.Query(); ok {
		_spec.SetField(adminauditlog.FieldQuery, field.TypeString, value)
	}
	if aaluo.mutation.QueryCleared() {
		_spec.ClearField(adminauditlog.FieldQuery, field.TypeString)
	}
	if value, ok := aaluo.mutation.Params(); ok {
		_spec.SetField(adminauditlog.FieldParams, field.TypeString, value)
	}
	if aaluo.mutation.ParamsCleared() {
		_spec.ClearField(adminauditlog.FieldParams, field.TypeString)
	}
	if value, ok := aaluo.mutation.Source(); ok {
		_spec.SetField(adminauditlog.FieldSource, field.TypeString, value)
	}
	if value, ok := aaluo.mutation.DurationMs(); ok {
		_spec.SetField(adminauditlog.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := aaluo.mutation.AddedDurationMs(); ok {
		_spec.AddField(adminauditlog.FieldDurationMs, field.TypeInt, value)
	}
	if aaluo.mutation.DurationMsCleared() {
		_spec.ClearField(adminauditlog.FieldDurationMs, field.TypeInt)
	}
	if value, ok := aaluo.mutation.CreatedAt(); ok {
		_spec.SetField(adminauditlog.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &AdminAuditLog{config: aaluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aaluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminauditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aaluo.mutation.done = true
	return _node, nil
}
