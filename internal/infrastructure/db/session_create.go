// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/session"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetRefreshToken sets the "refresh_token" field.
func (sc *SessionCreate) SetRefreshToken(s string) *SessionCreate {
	sc.mutation.SetRefreshToken(s)
	return sc
}

// SetIPAddress sets the "ip_address" field.
func (sc *SessionCreate) SetIPAddress(s string) *SessionCreate {
	sc.mutation.SetIPAddress(s)
	return sc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (sc *SessionCreate) SetNillableIPAddress(s *string) *SessionCreate {
	if s != nil {
		sc.SetIPAddress(*s)
	}
	return sc
}

// SetUserAgent sets the "user_agent" field.
func (sc *SessionCreate) SetUserAgent(s string) *SessionCreate {
	sc.mutation.SetUserAgent(s)
	return sc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (sc *SessionCreate) SetNillableUserAgent(s *string) *SessionCreate {
	if s != nil {
		sc.SetUserAgent(*s)
	}
	return sc
}

// SetDeviceID sets the "device_id" field.
func (sc *SessionCreate) SetDeviceID(s string) *SessionCreate {
	sc.mutation.SetDeviceID(s)
	return sc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (sc *SessionCreate) SetNillableDeviceID(s *string) *SessionCreate {
	if s != nil {
		sc.SetDeviceID(*s)
	}
	return sc
}

// SetNumberOfUses sets the "number_of_uses" field.
func (sc *SessionCreate) SetNumberOfUses(u uint64) *SessionCreate {
	sc.mutation.SetNumberOfUses(u)
	return sc
}

// SetNillableNumberOfUses sets the "number_of_uses" field if the given value is not nil.
func (sc *SessionCreate) SetNillableNumberOfUses(u *uint64) *SessionCreate {
	if u != nil {
		sc.SetNumberOfUses(*u)
	}
	return sc
}

// SetExpiresAt sets the "expires_at" field.
func (sc *SessionCreate) SetExpiresAt(t time.Time) *SessionCreate {
	sc.mutation.SetExpiresAt(t)
	return sc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableExpiresAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetExpiresAt(*t)
	}
	return sc
}

// SetLastUsedAt sets the "last_used_at" field.
func (sc *SessionCreate) SetLastUsedAt(t time.Time) *SessionCreate {
	sc.mutation.SetLastUsedAt(t)
	return sc
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableLastUsedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetLastUsedAt(*t)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SessionCreate) SetCreatedAt(t time.Time) *SessionCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableCreatedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetRevokedAt sets the "revoked_at" field.
func (sc *SessionCreate) SetRevokedAt(t time.Time) *SessionCreate {
	sc.mutation.SetRevokedAt(t)
	return sc
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableRevokedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetRevokedAt(*t)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *SessionCreate) SetUserID(u uuid.UUID) *SessionCreate {
	sc.mutation.SetUserID(u)
	return sc
}

// SetID sets the "id" field.
func (sc *SessionCreate) SetID(u uuid.UUID) *SessionCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SessionCreate) SetNillableID(u *uuid.UUID) *SessionCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *SessionCreate) SetUser(u *User) *SessionCreate {
	return sc.SetUserID(u.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SessionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SessionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SessionCreate) defaults() {
	if _, ok := sc.mutation.NumberOfUses(); !ok {
		v := session.DefaultNumberOfUses
		sc.mutation.SetNumberOfUses(v)
	}
	if _, ok := sc.mutation.ExpiresAt(); !ok {
		v := session.DefaultExpiresAt()
		sc.mutation.SetExpiresAt(v)
	}
	if _, ok := sc.mutation.LastUsedAt(); !ok {
		v := session.DefaultLastUsedAt()
		sc.mutation.SetLastUsedAt(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := session.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := session.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`db: missing required field "Session.refresh_token"`)}
	}
	if v, ok := sc.mutation.RefreshToken(); ok {
		if err := session.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`db: validator failed for field "Session.refresh_token": %w`, err)}
		}
	}
	if _, ok := sc.mutation.NumberOfUses(); !ok {
		return &ValidationError{Name: "number_of_uses", err: errors.New(`db: missing required field "Session.number_of_uses"`)}
	}
	if v, ok := sc.mutation.NumberOfUses(); ok {
		if err := session.NumberOfUsesValidator(v); err != nil {
			return &ValidationError{Name: "number_of_uses", err: fmt.Errorf(`db: validator failed for field "Session.number_of_uses": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`db: missing required field "Session.expires_at"`)}
	}
	if _, ok := sc.mutation.LastUsedAt(); !ok {
		return &ValidationError{Name: "last_used_at", err: errors.New(`db: missing required field "Session.last_used_at"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Session.created_at"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`db: missing required field "Session.user_id"`)}
	}
	if len(sc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`db: missing required edge "Session.user"`)}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(session.Table, sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.RefreshToken(); ok {
		_spec.SetField(session.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := sc.mutation.IPAddress(); ok {
		_spec.SetField(session.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := sc.mutation.UserAgent(); ok {
		_spec.SetField(session.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := sc.mutation.DeviceID(); ok {
		_spec.SetField(session.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := sc.mutation.NumberOfUses(); ok {
		_spec.SetField(session.FieldNumberOfUses, field.TypeUint64, value)
		_node.NumberOfUses = value
	}
	if value, ok := sc.mutation.ExpiresAt(); ok {
		_spec.SetField(session.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := sc.mutation.LastUsedAt(); ok {
		_spec.SetField(session.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(session.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.RevokedAt(); ok {
		_spec.SetField(session.FieldRevokedAt, field.TypeTime, value)
		_node.RevokedAt = &value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.UserTable,
			Columns: []string{session.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	err      error
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
