// Code generated by ent, DO NOT EDIT.

package db

import (
	"time"

	"github.com/alfariiizi/vandor/database/schema"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/adminauditlog"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/product"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/session"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	adminauditlogFields := schema.AdminAuditLog{}.Fields()
	_ = adminauditlogFields
	// adminauditlogDescSource is the schema descriptor for source field.
	adminauditlogDescSource := adminauditlogFields[8].Descriptor()
	// adminauditlog.DefaultSource holds the default value on creation for the source field.
	adminauditlog.DefaultSource = adminauditlogDescSource.Default.(string)
	// adminauditlogDescCreatedAt is the schema descriptor for created_at field.
	adminauditlogDescCreatedAt := adminauditlogFields[10].Descriptor()
	// adminauditlog.DefaultCreatedAt holds the default value on creation for the created_at field.
	adminauditlog.DefaultCreatedAt = adminauditlogDescCreatedAt.Default.(func() time.Time)
	// adminauditlogDescID is the schema descriptor for id field.
	adminauditlogDescID := adminauditlogFields[0].Descriptor()
	// adminauditlog.DefaultID holds the default value on creation for the id field.
	adminauditlog.DefaultID = adminauditlogDescID.Default.(func() uuid.UUID)
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescName is the schema descriptor for name field.
	productDescName := productFields[1].Descriptor()
	// product.NameValidator is a validator for the "name" field. It is called by the builders before save.
	product.NameValidator = productDescName.Validators[0].(func(string) error)
	// productDescCreatedAt is the schema descriptor for created_at field.
	productDescCreatedAt := productFields[6].Descriptor()
	// product.DefaultCreatedAt holds the default value on creation for the created_at field.
	product.DefaultCreatedAt = productDescCreatedAt.Default.(func() time.Time)
	// productDescUpdatedAt is the schema descriptor for updated_at field.
	productDescUpdatedAt := productFields[7].Descriptor()
	// product.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	product.UpdateDefaultUpdatedAt = productDescUpdatedAt.UpdateDefault.(func() time.Time)
	// productDescID is the schema descriptor for id field.
	productDescID := productFields[0].Descriptor()
	// product.DefaultID holds the default value on creation for the id field.
	product.DefaultID = productDescID.Default.(func() uuid.UUID)
	sessionFields := schema.Session{}.Fields()
	_ = sessionFields
	// sessionDescRefreshToken is the schema descriptor for refresh_token field.
	sessionDescRefreshToken := sessionFields[1].Descriptor()
	// session.RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	session.RefreshTokenValidator = sessionDescRefreshToken.Validators[0].(func(string) error)
	// sessionDescNumberOfUses is the schema descriptor for number_of_uses field.
	sessionDescNumberOfUses := sessionFields[5].Descriptor()
	// session.DefaultNumberOfUses holds the default value on creation for the number_of_uses field.
	session.DefaultNumberOfUses = sessionDescNumberOfUses.Default.(uint64)
	// session.NumberOfUsesValidator is a validator for the "number_of_uses" field. It is called by the builders before save.
	session.NumberOfUsesValidator = func() func(uint64) error {
		validators := sessionDescNumberOfUses.Validators
		fns := [...]func(uint64) error{
			validators[0].(func(uint64) error),
			validators[1].(func(uint64) error),
		}
		return func(number_of_uses uint64) error {
			for _, fn := range fns {
				if err := fn(number_of_uses); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// sessionDescExpiresAt is the schema descriptor for expires_at field.
	sessionDescExpiresAt := sessionFields[6].Descriptor()
	// session.DefaultExpiresAt holds the default value on creation for the expires_at field.
	session.DefaultExpiresAt = sessionDescExpiresAt.Default.(func() time.Time)
	// sessionDescLastUsedAt is the schema descriptor for last_used_at field.
	sessionDescLastUsedAt := sessionFields[7].Descriptor()
	// session.DefaultLastUsedAt holds the default value on creation for the last_used_at field.
	session.DefaultLastUsedAt = sessionDescLastUsedAt.Default.(func() time.Time)
	// sessionDescCreatedAt is the schema descriptor for created_at field.
	sessionDescCreatedAt := sessionFields[8].Descriptor()
	// session.DefaultCreatedAt holds the default value on creation for the created_at field.
	session.DefaultCreatedAt = sessionDescCreatedAt.Default.(func() time.Time)
	// sessionDescID is the schema descriptor for id field.
	sessionDescID := sessionFields[0].Descriptor()
	// session.DefaultID holds the default value on creation for the id field.
	session.DefaultID = sessionDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[4].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[7].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
