// Code generated by ent, DO NOT EDIT.

package adminauditlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the adminauditlog type in the database.
	Label = "admin_audit_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserEmail holds the string denoting the user_email field in the database.
	FieldUserEmail = "user_email"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldArgs holds the string denoting the args field in the database.
	FieldArgs = "args"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldParams holds the string denoting the params field in the database.
	FieldParams = "params"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldDurationMs holds the string denoting the duration_ms field in the database.
	FieldDurationMs = "duration_ms"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the adminauditlog in the database.
	Table = "admin_audit_logs"
)

// Columns holds all SQL columns for adminauditlog fields.
var Columns = []string{
	FieldID,
	FieldUserEmail,
	FieldOperation,
	FieldModel,
	FieldArgs,
	FieldResult,
	FieldQuery,
	FieldParams,
	FieldSource,
	FieldDurationMs,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSource holds the default value on creation for the "source" field.
	DefaultSource string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the AdminAuditLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserEmail orders the results by the user_email field.
func ByUserEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserEmail, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByQuery orders the results by the query field.
func ByQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuery, opts...).ToFunc()
}

// ByParams orders the results by the params field.
func ByParams(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParams, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByDurationMs orders the results by the duration_ms field.
func ByDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMs, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
