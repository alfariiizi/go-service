// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/adminauditlog"
	"github.com/google/uuid"
)

// AdminAuditLog is the model entity for the AdminAuditLog schema.
type AdminAuditLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserEmail holds the value of the "user_email" field.
	UserEmail string `json:"user_email,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation string `json:"operation,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// Args holds the value of the "args" field.
	Args map[string]interface{} `json:"args,omitempty"`
	// Result holds the value of the "result" field.
	Result map[string]interface{} `json:"result,omitempty"`
	// Query holds the value of the "query" field.
	Query string `json:"query,omitempty"`
	// Params holds the value of the "params" field.
	Params string `json:"params,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// DurationMs holds the value of the "duration_ms" field.
	DurationMs int `json:"duration_ms,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminAuditLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminauditlog.FieldArgs, adminauditlog.FieldResult:
			values[i] = new([]byte)
		case adminauditlog.FieldDurationMs:
			values[i] = new(sql.NullInt64)
		case adminauditlog.FieldUserEmail, adminauditlog.FieldOperation, adminauditlog.FieldModel, adminauditlog.FieldQuery, adminauditlog.FieldParams, adminauditlog.FieldSource:
			values[i] = new(sql.NullString)
		case adminauditlog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case adminauditlog.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminAuditLog fields.
func (aal *AdminAuditLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminauditlog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aal.ID = *value
			}
		case adminauditlog.FieldUserEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_email", values[i])
			} else if value.Valid {
				aal.UserEmail = value.String
			}
		case adminauditlog.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				aal.Operation = value.String
			}
		case adminauditlog.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				aal.Model = value.String
			}
		case adminauditlog.FieldArgs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field args", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &aal.Args); err != nil {
					return fmt.Errorf("unmarshal field args: %w", err)
				}
			}
		case adminauditlog.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &aal.Result); err != nil {
					return fmt.Errorf("unmarshal field result: %w", err)
				}
			}
		case adminauditlog.FieldQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value.Valid {
				aal.Query = value.String
			}
		case adminauditlog.FieldParams:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field params", values[i])
			} else if value.Valid {
				aal.Params = value.String
			}
		case adminauditlog.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				aal.Source = value.String
			}
		case adminauditlog.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				aal.DurationMs = int(value.Int64)
			}
		case adminauditlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aal.CreatedAt = value.Time
			}
		default:
			aal.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminAuditLog.
// This includes values selected through modifiers, order, etc.
func (aal *AdminAuditLog) Value(name string) (ent.Value, error) {
	return aal.selectValues.Get(name)
}

// Update returns a builder for updating this AdminAuditLog.
// Note that you need to call AdminAuditLog.Unwrap() before calling this method if this AdminAuditLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (aal *AdminAuditLog) Update() *AdminAuditLogUpdateOne {
	return NewAdminAuditLogClient(aal.config).UpdateOne(aal)
}

// Unwrap unwraps the AdminAuditLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aal *AdminAuditLog) Unwrap() *AdminAuditLog {
	_tx, ok := aal.config.driver.(*txDriver)
	if !ok {
		panic("db: AdminAuditLog is not a transactional entity")
	}
	aal.config.driver = _tx.drv
	return aal
}

// String implements the fmt.Stringer.
func (aal *AdminAuditLog) String() string {
	var builder strings.Builder
	builder.WriteString("AdminAuditLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aal.ID))
	builder.WriteString("user_email=")
	builder.WriteString(aal.UserEmail)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(aal.Operation)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(aal.Model)
	builder.WriteString(", ")
	builder.WriteString("args=")
	builder.WriteString(fmt.Sprintf("%v", aal.Args))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", aal.Result))
	builder.WriteString(", ")
	builder.WriteString("query=")
	builder.WriteString(aal.Query)
	builder.WriteString(", ")
	builder.WriteString("params=")
	builder.WriteString(aal.Params)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(aal.Source)
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", aal.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(aal.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AdminAuditLogs is a parsable slice of AdminAuditLog.
type AdminAuditLogs []*AdminAuditLog
