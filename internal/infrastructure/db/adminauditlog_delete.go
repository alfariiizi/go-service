// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/adminauditlog"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/predicate"
)

// AdminAuditLogDelete is the builder for deleting a AdminAuditLog entity.
type AdminAuditLogDelete struct {
	config
	hooks    []Hook
	mutation *AdminAuditLogMutation
}

// Where appends a list predicates to the AdminAuditLogDelete builder.
func (aald *AdminAuditLogDelete) Where(ps ...predicate.AdminAuditLog) *AdminAuditLogDelete {
	aald.mutation.Where(ps...)
	return aald
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aald *AdminAuditLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aald.sqlExec, aald.mutation, aald.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aald *AdminAuditLogDelete) ExecX(ctx context.Context) int {
	n, err := aald.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aald *AdminAuditLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(adminauditlog.Table, sqlgraph.NewFieldSpec(adminauditlog.FieldID, field.TypeUUID))
	if ps := aald.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aald.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aald.mutation.done = true
	return affected, err
}

// AdminAuditLogDeleteOne is the builder for deleting a single AdminAuditLog entity.
type AdminAuditLogDeleteOne struct {
	aald *AdminAuditLogDelete
}

// Where appends a list predicates to the AdminAuditLogDelete builder.
func (aaldo *AdminAuditLogDeleteOne) Where(ps ...predicate.AdminAuditLog) *AdminAuditLogDeleteOne {
	aaldo.aald.mutation.Where(ps...)
	return aaldo
}

// Exec executes the deletion query.
func (aaldo *AdminAuditLogDeleteOne) Exec(ctx context.Context) error {
	n, err := aaldo.aald.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{adminauditlog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aaldo *AdminAuditLogDeleteOne) ExecX(ctx context.Context) {
	if err := aaldo.Exec(ctx); err != nil {
		panic(err)
	}
}
