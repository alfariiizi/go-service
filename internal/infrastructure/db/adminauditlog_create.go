// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alfariiizi/vandor/internal/infrastructure/db/adminauditlog"
	"github.com/google/uuid"
)

// AdminAuditLogCreate is the builder for creating a AdminAuditLog entity.
type AdminAuditLogCreate struct {
	config
	mutation *AdminAuditLogMutation
	hooks    []Hook
}

// SetUserEmail sets the "user_email" field.
func (aalc *AdminAuditLogCreate) SetUserEmail(s string) *AdminAuditLogCreate {
	aalc.mutation.SetUserEmail(s)
	return aalc
}

// SetOperation sets the "operation" field.
func (aalc *AdminAuditLogCreate) SetOperation(s string) *AdminAuditLogCreate {
	aalc.mutation.SetOperation(s)
	return aalc
}

// SetModel sets the "model" field.
func (aalc *AdminAuditLogCreate) SetModel(s string) *AdminAuditLogCreate {
	aalc.mutation.SetModel(s)
	return aalc
}

// SetArgs sets the "args" field.
func (aalc *AdminAuditLogCreate) SetArgs(m map[string]interface{}) *AdminAuditLogCreate {
	aalc.mutation.SetArgs(m)
	return aalc
}

// SetResult sets the "result" field.
func (aalc *AdminAuditLogCreate) SetResult(m map[string]interface{}) *AdminAuditLogCreate {
	aalc.mutation.SetResult(m)
	return aalc
}

// SetQuery sets the "query" field.
func (aalc *AdminAuditLogCreate) SetQuery(s string) *AdminAuditLogCreate {
	aalc.mutation.SetQuery(s)
	return aalc
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (aalc *AdminAuditLogCreate) SetNillableQuery(s *string) *AdminAuditLogCreate {
	if s != nil {
		aalc.SetQuery(*s)
	}
	return aalc
}

// SetParams sets the "params" field.
func (aalc *AdminAuditLogCreate) SetParams(s string) *AdminAuditLogCreate {
	aalc.mutation.SetParams(s)
	return aalc
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (aalc *AdminAuditLogCreate) SetNillableParams(s *string) *AdminAuditLogCreate {
	if s != nil {
		aalc.SetParams(*s)
	}
	return aalc
}

// SetSource sets the "source" field.
func (aalc *AdminAuditLogCreate) SetSource(s string) *AdminAuditLogCreate {
	aalc.mutation.SetSource(s)
	return aalc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (aalc *AdminAuditLogCreate) SetNillableSource(s *string) *AdminAuditLogCreate {
	if s != nil {
		aalc.SetSource(*s)
	}
	return aalc
}

// SetDurationMs sets the "duration_ms" field.
func (aalc *AdminAuditLogCreate) SetDurationMs(i int) *AdminAuditLogCreate {
	aalc.mutation.SetDurationMs(i)
	return aalc
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (aalc *AdminAuditLogCreate) SetNillableDurationMs(i *int) *AdminAuditLogCreate {
	if i != nil {
		aalc.SetDurationMs(*i)
	}
	return aalc
}

// SetCreatedAt sets the "created_at" field.
func (aalc *AdminAuditLogCreate) SetCreatedAt(t time.Time) *AdminAuditLogCreate {
	aalc.mutation.SetCreatedAt(t)
	return aalc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aalc *AdminAuditLogCreate) SetNillableCreatedAt(t *time.Time) *AdminAuditLogCreate {
	if t != nil {
		aalc.SetCreatedAt(*t)
	}
	return aalc
}

// SetID sets the "id" field.
func (aalc *AdminAuditLogCreate) SetID(u uuid.UUID) *AdminAuditLogCreate {
	aalc.mutation.SetID(u)
	return aalc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aalc *AdminAuditLogCreate) SetNillableID(u *uuid.UUID) *AdminAuditLogCreate {
	if u != nil {
		aalc.SetID(*u)
	}
	return aalc
}

// Mutation returns the AdminAuditLogMutation object of the builder.
func (aalc *AdminAuditLogCreate) Mutation() *AdminAuditLogMutation {
	return aalc.mutation
}

// Save creates the AdminAuditLog in the database.
func (aalc *AdminAuditLogCreate) Save(ctx context.Context) (*AdminAuditLog, error) {
	aalc.defaults()
	return withHooks(ctx, aalc.sqlSave, aalc.mutation, aalc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aalc *AdminAuditLogCreate) SaveX(ctx context.Context) *AdminAuditLog {
	v, err := aalc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aalc *AdminAuditLogCreate) Exec(ctx context.Context) error {
	_, err := aalc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aalc *AdminAuditLogCreate) ExecX(ctx context.Context) {
	if err := aalc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aalc *AdminAuditLogCreate) defaults() {
	if _, ok := aalc.mutation.Source(); !ok {
		v := adminauditlog.DefaultSource
		aalc.mutation.SetSource(v)
	}
	if _, ok := aalc.mutation.CreatedAt(); !ok {
		v := adminauditlog.DefaultCreatedAt()
		aalc.mutation.SetCreatedAt(v)
	}
	if _, ok := aalc.mutation.ID(); !ok {
		v := adminauditlog.DefaultID()
		aalc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aalc *AdminAuditLogCreate) check() error {
	if _, ok := aalc.mutation.UserEmail(); !ok {
		return &ValidationError{Name: "user_email", err: errors.New(`db: missing required field "AdminAuditLog.user_email"`)}
	}
	if _, ok := aalc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`db: missing required field "AdminAuditLog.operation"`)}
	}
	if _, ok := aalc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`db: missing required field "AdminAuditLog.model"`)}
	}
	if _, ok := aalc.mutation.Args(); !ok {
		return &ValidationError{Name: "args", err: errors.New(`db: missing required field "AdminAuditLog.args"`)}
	}
	if _, ok := aalc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`db: missing required field "AdminAuditLog.source"`)}
	}
	if _, ok := aalc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AdminAuditLog.created_at"`)}
	}
	return nil
}

func (aalc *AdminAuditLogCreate) sqlSave(ctx context.Context) (*AdminAuditLog, error) {
	if err := aalc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aalc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aalc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	aalc.mutation.id = &_node.ID
	aalc.mutation.done = true
	return _node, nil
}

func (aalc *AdminAuditLogCreate) createSpec() (*AdminAuditLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminAuditLog{config: aalc.config}
		_spec = sqlgraph.NewCreateSpec(adminauditlog.Table, sqlgraph.NewFieldSpec(adminauditlog.FieldID, field.TypeUUID))
	)
	if id, ok := aalc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := aalc.mutation.UserEmail(); ok {
		_spec.SetField(adminauditlog.FieldUserEmail, field.TypeString, value)
		_node.UserEmail = value
	}
	if value, ok := aalc.mutation.Operation(); ok {
		_spec.SetField(adminauditlog.FieldOperation, field.TypeString, value)
		_node.Operation = value
	}
	if value, ok := aalc.mutation.Model(); ok {
		_spec.SetField(adminauditlog.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := aalc.mutation.Args(); ok {
		_spec.SetField(adminauditlog.FieldArgs, field.TypeJSON, value)
		_node.Args = value
	}
	if value, ok := aalc.mutation.Result(); ok {
		_spec.SetField(adminauditlog.FieldResult, field.TypeJSON, value)
		_node.Result = value
	}
	if value, ok := aalc.mutation.Query(); ok {
		_spec.SetField(adminauditlog.FieldQuery, field.TypeString, value)
		_node.Query = value
	}
	if value, ok := aalc.mutation.Params(); ok {
		_spec.SetField(adminauditlog.FieldParams, field.TypeString, value)
		_node.Params = value
	}
	if value, ok := aalc.mutation.Source(); ok {
		_spec.SetField(adminauditlog.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := aalc.mutation.DurationMs(); ok {
		_spec.SetField(adminauditlog.FieldDurationMs, field.TypeInt, value)
		_node.DurationMs = value
	}
	if value, ok := aalc.mutation.CreatedAt(); ok {
		_spec.SetField(adminauditlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// AdminAuditLogCreateBulk is the builder for creating many AdminAuditLog entities in bulk.
type AdminAuditLogCreateBulk struct {
	config
	err      error
	builders []*AdminAuditLogCreate
}

// Save creates the AdminAuditLog entities in the database.
func (aalcb *AdminAuditLogCreateBulk) Save(ctx context.Context) ([]*AdminAuditLog, error) {
	if aalcb.err != nil {
		return nil, aalcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aalcb.builders))
	nodes := make([]*AdminAuditLog, len(aalcb.builders))
	mutators := make([]Mutator, len(aalcb.builders))
	for i := range aalcb.builders {
		func(i int, root context.Context) {
			builder := aalcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminAuditLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aalcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aalcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aalcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aalcb *AdminAuditLogCreateBulk) SaveX(ctx context.Context) []*AdminAuditLog {
	v, err := aalcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aalcb *AdminAuditLogCreateBulk) Exec(ctx context.Context) error {
	_, err := aalcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aalcb *AdminAuditLogCreateBulk) ExecX(ctx context.Context) {
	if err := aalcb.Exec(ctx); err != nil {
		panic(err)
	}
}
